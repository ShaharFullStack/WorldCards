{"ast":null,"code":"import axios from \"axios\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass CountryService {\n  async getAllCountries() {\n    const response = await axios.get(appConfig.countriesUrl);\n    return response.data;\n  }\n  async getOneCountry(name) {\n    // Use the correct endpoint: /name instead of /all\n    const response = await axios.get(`${appConfig.countryDetailsUrl}/name/${name}`);\n    return response.data[0]; // The API returns an array, so we need to access the first item\n  }\n}\nexport const countryService = new CountryService();","map":{"version":3,"names":["axios","appConfig","CountryService","getAllCountries","response","get","countriesUrl","data","getOneCountry","name","countryDetailsUrl","countryService"],"sources":["C:/chatGpt training/worldCards/world/src/Services/CountryService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { CountryModel } from \"../Models/CountryModel\";\r\nimport { appConfig } from \"../Utils/AppConfig\";\r\n\r\nclass CountryService {\r\n    public async getAllCountries(): Promise<CountryModel[]> {\r\n        const response = await axios.get<CountryModel[]>(appConfig.countriesUrl);\r\n        return response.data;\r\n    }\r\n\r\n    public async getOneCountry(name: string): Promise<CountryModel> {\r\n        // Use the correct endpoint: /name instead of /all\r\n        const response = await axios.get<CountryModel[]>(`${appConfig.countryDetailsUrl}/name/${name}`);\r\n        return response.data[0]; // The API returns an array, so we need to access the first item\r\n    }\r\n}\r\n\r\nexport const countryService = new CountryService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,cAAc,CAAC;EACjB,MAAaC,eAAeA,CAAA,EAA4B;IACpD,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAiBJ,SAAS,CAACK,YAAY,CAAC;IACxE,OAAOF,QAAQ,CAACG,IAAI;EACxB;EAEA,MAAaC,aAAaA,CAACC,IAAY,EAAyB;IAC5D;IACA,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAiB,GAAGJ,SAAS,CAACS,iBAAiB,SAASD,IAAI,EAAE,CAAC;IAC/F,OAAOL,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B;AACJ;AAEA,OAAO,MAAMI,cAAc,GAAG,IAAIT,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}