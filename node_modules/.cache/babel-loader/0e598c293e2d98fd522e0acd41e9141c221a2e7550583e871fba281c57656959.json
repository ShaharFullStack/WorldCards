{"ast":null,"code":"var _jsxFileName = \"C:\\\\chatGpt training\\\\worldCards\\\\world\\\\src\\\\Components\\\\CountryArea\\\\Countries\\\\Countries.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { countryService } from \"../../../Services/CountryService\";\nimport { CountryCard } from \"../CountryCard/CountryCard\";\nimport \"./Countries.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Countries() {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Define the search query state\n\n  useEffect(() => {\n    countryService.getAllCountries().then(countries => {\n      setCountries(countries);\n      setFilteredCountries(countries); // Initialize with all countries\n    }).catch(err => console.error(err.message));\n  }, []);\n\n  // Update filtered countries based on the search query\n  useEffect(() => {\n    const query = searchQuery.toLowerCase();\n    const filtered = countries.filter(c => c.name.common.toLowerCase().includes(query));\n    setFilteredCountries(filtered);\n  }, [searchQuery, countries]);\n  const handleSearchChange = e => {\n    setSearchQuery(e.target.value);\n  };\n  const handleCountryClick = country => {\n    if (!selectedCountries.includes(country)) {\n      setSelectedCountries([...selectedCountries, country]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Countries\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"countryForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"countryInput\",\n        placeholder: \"Enter country name\",\n        value: searchQuery,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"navLinkBtn\",\n        id: \"\\u05D3\\u05E7\\u05E9\\u05E8\",\n        children: /*#__PURE__*/_jsxDEV(NavLink, {\n          to: \"/countries\",\n          children: \"Click To See The World\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countryGrid\",\n      children: filteredCountries.map(c => /*#__PURE__*/_jsxDEV(CountryCard, {\n        country: c,\n        onClick: () => handleCountryClick(c)\n      }, c.name.common, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(Countries, \"DHFHLyQYa1tmcGw7Kzu3DcHwYLw=\");\n_c = Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["useEffect","useState","countryService","CountryCard","jsxDEV","_jsxDEV","Countries","_s","countries","setCountries","filteredCountries","setFilteredCountries","selectedCountries","setSelectedCountries","searchQuery","setSearchQuery","getAllCountries","then","catch","err","console","error","message","query","toLowerCase","filtered","filter","c","name","common","includes","handleSearchChange","e","target","value","handleCountryClick","country","className","children","id","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","NavLink","to","map","onClick","_c","$RefreshReg$"],"sources":["C:/chatGpt training/worldCards/world/src/Components/CountryArea/Countries/Countries.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { CountryModel } from \"../../../Models/CountryModel\";\nimport { countryService } from \"../../../Services/CountryService\";\nimport { CountryCard } from \"../CountryCard/CountryCard\";\nimport \"./Countries.css\";\n\ninterface CountriesProps {\n    setSelectedCountries: React.Dispatch<React.SetStateAction<CountryModel[]>>;\n}\n\nexport function Countries(): JSX.Element {\n    const [countries, setCountries] = useState<CountryModel[]>([]);\n    const [filteredCountries, setFilteredCountries] = useState<CountryModel[]>([]);\n    const [selectedCountries, setSelectedCountries] = useState<CountryModel[]>([]);\n    const [searchQuery, setSearchQuery] = useState<string>(\"\"); // Define the search query state\n\n    useEffect(() => {\n        countryService.getAllCountries()\n            .then(countries => {\n                setCountries(countries);\n                setFilteredCountries(countries); // Initialize with all countries\n            })\n            .catch(err => console.error(err.message));\n    }, []);\n\n    // Update filtered countries based on the search query\n    useEffect(() => {\n        const query = searchQuery.toLowerCase();\n        const filtered = countries.filter(c =>\n            c.name.common.toLowerCase().includes(query)\n        );\n        setFilteredCountries(filtered);\n    }, [searchQuery, countries]);\n\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(e.target.value); \n    };\n\n    const handleCountryClick = (country: CountryModel) => {\n        if (!selectedCountries.includes(country)) {\n            setSelectedCountries([...selectedCountries, country]);\n        }\n    };\n\n    return (\n        <div className=\"Countries\">\n            <form id=\"countryForm\">\n                <input\n                    type=\"text\"\n                    id=\"countryInput\"\n                    placeholder=\"Enter country name\"\n                    value={searchQuery} \n                    onChange={handleSearchChange} \n                />\n                            <button className=\"navLinkBtn\" id=\"דקשר\">\n                <NavLink to=\"/countries\">Click To See The World</NavLink>\n            </button>\n            </form>\n            <div className=\"countryGrid\">\n                {filteredCountries.map(c => ( \n                    <CountryCard\n                        key={c.name.common}\n                        country={c}\n                        onClick={() => handleCountryClick(c)} \n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}