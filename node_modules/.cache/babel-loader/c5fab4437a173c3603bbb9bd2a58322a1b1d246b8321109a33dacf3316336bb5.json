{"ast":null,"code":"var _jsxFileName = \"C:\\\\chatGpt training\\\\worldCards\\\\world\\\\src\\\\Components\\\\CountryArea\\\\Countries\\\\Countries.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Countries.css\";\nimport { countryService } from \"../../../Services/CountryService\";\nimport { CountryCard } from \"../CountryCard/CountryCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Countries() {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  useEffect(() => {\n    countryService.getAllCountries().then(countries => {\n      setCountries(countries);\n    }).catch(err => console.error(err.message));\n  }, []);\n  const handleCountryClick = country => {\n    if (!selectedCountries.includes(country)) {\n      setSelectedCountries(prevSelected => [...prevSelected, country]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Countries\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The World\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countryGrid\",\n      children: countries.map(c => /*#__PURE__*/_jsxDEV(CountryCard, {\n        country: c,\n        onCli: handleCountryClick\n      }, c.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(Countries, \"vOoGDvBP3GxP1WZ2IZIvtjXzQVE=\");\n_c = Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useEffect","useState","countryService","CountryCard","jsxDEV","_jsxDEV","Countries","_s","countries","setCountries","selectedCountries","setSelectedCountries","getAllCountries","then","catch","err","console","error","message","handleCountryClick","country","includes","prevSelected","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","c","onCli","name","_c","$RefreshReg$"],"sources":["C:/chatGpt training/worldCards/world/src/Components/CountryArea/Countries/Countries.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Countries.css\";\nimport { CountryModel } from \"../../../Models/CountryModel\";\nimport { countryService } from \"../../../Services/CountryService\";\nimport { CountryCard } from \"../CountryCard/CountryCard\";\n\nexport function Countries(): JSX.Element {\n\n    const [countries, setCountries] = useState<CountryModel[]>([]);\n    const [selectedCountries, setSelectedCountries] = useState<CountryModel[]>([]);\n\n    useEffect(() => {\n        countryService.getAllCountries()\n            .then(countries => {\n                setCountries(countries);\n            })\n            .catch(err => console.error(err.message));\n    }, []);\n\n    const handleCountryClick = (country: CountryModel) => {\n        if (!selectedCountries.includes(country)) {\n            setSelectedCountries(prevSelected => [...prevSelected, country]);\n        }\n    };\n\n    return (\n        <div className=\"Countries\">\n            <h1>The World</h1>\n            <div className=\"countryGrid\">\n                {countries.map(c => (\n                    <CountryCard \n                        key={c.name} \n                        country={c} \n                        onCli={handleCountryClick} \n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,iBAAiB;AAExB,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,WAAW,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,OAAO,SAASC,SAASA,CAAA,EAAgB;EAAAC,EAAA;EAErC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAiB,EAAE,CAAC;EAC9D,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAiB,EAAE,CAAC;EAE9ED,SAAS,CAAC,MAAM;IACZE,cAAc,CAACU,eAAe,CAAC,CAAC,CAC3BC,IAAI,CAACL,SAAS,IAAI;MACfC,YAAY,CAACD,SAAS,CAAC;IAC3B,CAAC,CAAC,CACDM,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAIC,OAAqB,IAAK;IAClD,IAAI,CAACV,iBAAiB,CAACW,QAAQ,CAACD,OAAO,CAAC,EAAE;MACtCT,oBAAoB,CAACW,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEF,OAAO,CAAC,CAAC;IACpE;EACJ,CAAC;EAED,oBACIf,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBnB,OAAA;MAAAmB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBvB,OAAA;MAAKkB,SAAS,EAAC,aAAa;MAAAC,QAAA,EACvBhB,SAAS,CAACqB,GAAG,CAACC,CAAC,iBACZzB,OAAA,CAACF,WAAW;QAERiB,OAAO,EAAEU,CAAE;QACXC,KAAK,EAAEZ;MAAmB,GAFrBW,CAAC,CAACE,IAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGd,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACrB,EAAA,CAjCeD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}