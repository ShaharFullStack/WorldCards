{"ast":null,"code":"import{useEffect,useState}from\"react\";import{countryService}from\"../../../Services/CountryService\";import{CountryCard}from\"../CountryCard/CountryCard\";import\"./Countries.css\";import{NavLink}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export function Countries(){const[countries,setCountries]=useState([]);const[filteredCountries,setFilteredCountries]=useState([]);const[selectedCountries,setSelectedCountries]=useState([]);const[searchQuery,setSearchQuery]=useState(\"\");// Define the search query state\nuseEffect(()=>{countryService.getAllCountries().then(countries=>{setCountries(countries);setFilteredCountries(countries);// Initialize with all countries\n}).catch(err=>console.error(err.message));},[]);// Update filtered countries based on the search query\nuseEffect(()=>{const query=searchQuery.toLowerCase();const filtered=countries.filter(c=>c.name.common.toLowerCase().includes(query));setFilteredCountries(filtered);},[searchQuery,countries]);const handleSearchChange=e=>{setSearchQuery(e.target.value);};const handleCountryClick=country=>{if(!selectedCountries.includes(country)){setSelectedCountries([...selectedCountries,country]);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"Countries\",children:[/*#__PURE__*/_jsxs(\"form\",{id:\"countryForm\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"countryInput\",placeholder:\"Enter country name\",value:searchQuery,onChange:handleSearchChange}),/*#__PURE__*/_jsx(\"button\",{className:\"aboutBtn\",children:/*#__PURE__*/_jsx(NavLink,{to:\"/about\",children:\"Experimental Mode\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"countryGrid\",children:filteredCountries.map(c=>/*#__PURE__*/_jsx(CountryCard,{country:c,onClick:()=>handleCountryClick(c)},c.name.common))})]});}","map":{"version":3,"names":["useEffect","useState","countryService","CountryCard","NavLink","jsx","_jsx","jsxs","_jsxs","Countries","countries","setCountries","filteredCountries","setFilteredCountries","selectedCountries","setSelectedCountries","searchQuery","setSearchQuery","getAllCountries","then","catch","err","console","error","message","query","toLowerCase","filtered","filter","c","name","common","includes","handleSearchChange","e","target","value","handleCountryClick","country","className","children","id","type","placeholder","onChange","to","map","onClick"],"sources":["C:/chatGpt training/worldCards/world/src/Components/CountryArea/Countries/Countries.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { CountryModel } from \"../../../Models/CountryModel\";\r\nimport { countryService } from \"../../../Services/CountryService\";\r\nimport { CountryCard } from \"../CountryCard/CountryCard\";\r\nimport \"./Countries.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface CountriesProps {\r\n    setSelectedCountries: React.Dispatch<React.SetStateAction<CountryModel[]>>;\r\n}\r\n\r\nexport function Countries(): JSX.Element {\r\n    const [countries, setCountries] = useState<CountryModel[]>([]);\r\n    const [filteredCountries, setFilteredCountries] = useState<CountryModel[]>([]);\r\n    const [selectedCountries, setSelectedCountries] = useState<CountryModel[]>([]);\r\n    const [searchQuery, setSearchQuery] = useState<string>(\"\"); // Define the search query state\r\n\r\n    useEffect(() => {\r\n        countryService.getAllCountries()\r\n            .then(countries => {\r\n                setCountries(countries);\r\n                setFilteredCountries(countries); // Initialize with all countries\r\n            })\r\n            .catch(err => console.error(err.message));\r\n    }, []);\r\n\r\n    // Update filtered countries based on the search query\r\n    useEffect(() => {\r\n        const query = searchQuery.toLowerCase();\r\n        const filtered = countries.filter(c =>\r\n            c.name.common.toLowerCase().includes(query)\r\n        );\r\n        setFilteredCountries(filtered);\r\n    }, [searchQuery, countries]);\r\n\r\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(e.target.value);\r\n    };\r\n\r\n    const handleCountryClick = (country: CountryModel) => {\r\n        if (!selectedCountries.includes(country)) {\r\n            setSelectedCountries([...selectedCountries, country]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Countries\">\r\n            <form id=\"countryForm\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"countryInput\"\r\n                    placeholder=\"Enter country name\"\r\n                    value={searchQuery}\r\n                    onChange={handleSearchChange}\r\n                />\r\n                <button className=\"aboutBtn\">\r\n                    <NavLink to=\"/about\">Experimental Mode</NavLink>\r\n                </button>\r\n            </form>\r\n            <div className=\"countryGrid\">\r\n                {filteredCountries.map(c => (\r\n                    <CountryCard\r\n                        key={c.name.common}\r\n                        country={c}\r\n                        onClick={() => handleCountryClick(c)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,OAASC,cAAc,KAAQ,kCAAkC,CACjE,OAASC,WAAW,KAAQ,4BAA4B,CACxD,MAAO,iBAAiB,CACxB,OAASC,OAAO,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAM3C,MAAO,SAAS,CAAAC,SAASA,CAAA,CAAgB,CACrC,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAiB,EAAE,CAAC,CAC9D,KAAM,CAACW,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGZ,QAAQ,CAAiB,EAAE,CAAC,CAC9E,KAAM,CAACa,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGd,QAAQ,CAAiB,EAAE,CAAC,CAC9E,KAAM,CAACe,WAAW,CAAEC,cAAc,CAAC,CAAGhB,QAAQ,CAAS,EAAE,CAAC,CAAE;AAE5DD,SAAS,CAAC,IAAM,CACZE,cAAc,CAACgB,eAAe,CAAC,CAAC,CAC3BC,IAAI,CAACT,SAAS,EAAI,CACfC,YAAY,CAACD,SAAS,CAAC,CACvBG,oBAAoB,CAACH,SAAS,CAAC,CAAE;AACrC,CAAC,CAAC,CACDU,KAAK,CAACC,GAAG,EAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC,CAAC,CACjD,CAAC,CAAE,EAAE,CAAC,CAEN;AACAxB,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAyB,KAAK,CAAGT,WAAW,CAACU,WAAW,CAAC,CAAC,CACvC,KAAM,CAAAC,QAAQ,CAAGjB,SAAS,CAACkB,MAAM,CAACC,CAAC,EAC/BA,CAAC,CAACC,IAAI,CAACC,MAAM,CAACL,WAAW,CAAC,CAAC,CAACM,QAAQ,CAACP,KAAK,CAC9C,CAAC,CACDZ,oBAAoB,CAACc,QAAQ,CAAC,CAClC,CAAC,CAAE,CAACX,WAAW,CAAEN,SAAS,CAAC,CAAC,CAE5B,KAAM,CAAAuB,kBAAkB,CAAIC,CAAsC,EAAK,CACnEjB,cAAc,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAClC,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAIC,OAAqB,EAAK,CAClD,GAAI,CAACxB,iBAAiB,CAACkB,QAAQ,CAACM,OAAO,CAAC,CAAE,CACtCvB,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,CAAEwB,OAAO,CAAC,CAAC,CACzD,CACJ,CAAC,CAED,mBACI9B,KAAA,QAAK+B,SAAS,CAAC,WAAW,CAAAC,QAAA,eACtBhC,KAAA,SAAMiC,EAAE,CAAC,aAAa,CAAAD,QAAA,eAClBlC,IAAA,UACIoC,IAAI,CAAC,MAAM,CACXD,EAAE,CAAC,cAAc,CACjBE,WAAW,CAAC,oBAAoB,CAChCP,KAAK,CAAEpB,WAAY,CACnB4B,QAAQ,CAAEX,kBAAmB,CAChC,CAAC,cACF3B,IAAA,WAAQiC,SAAS,CAAC,UAAU,CAAAC,QAAA,cACxBlC,IAAA,CAACF,OAAO,EAACyC,EAAE,CAAC,QAAQ,CAAAL,QAAA,CAAC,mBAAiB,CAAS,CAAC,CAC5C,CAAC,EACP,CAAC,cACPlC,IAAA,QAAKiC,SAAS,CAAC,aAAa,CAAAC,QAAA,CACvB5B,iBAAiB,CAACkC,GAAG,CAACjB,CAAC,eACpBvB,IAAA,CAACH,WAAW,EAERmC,OAAO,CAAET,CAAE,CACXkB,OAAO,CAAEA,CAAA,GAAMV,kBAAkB,CAACR,CAAC,CAAE,EAFhCA,CAAC,CAACC,IAAI,CAACC,MAGf,CACJ,CAAC,CACD,CAAC,EACL,CAAC,CAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}