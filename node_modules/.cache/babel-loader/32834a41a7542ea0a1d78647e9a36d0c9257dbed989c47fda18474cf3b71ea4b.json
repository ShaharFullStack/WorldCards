{"ast":null,"code":"var _jsxFileName = \"C:\\\\chatGpt training\\\\worldCards\\\\world\\\\src\\\\Components\\\\CountryArea\\\\Countries\\\\Countries.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { countryService } from \"../../../Services/CountryService\";\nimport { CountryCard } from \"../CountryCard/CountryCard\";\nimport \"./Countries.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Countries() {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  useEffect(() => {\n    countryService.getAllCountries().then(countries => {\n      setCountries(countries);\n      setFilteredCountries(countries);\n    }).catch(err => console.error(err.message));\n  }, []);\n  useEffect(() => {\n    const query = searchQuery.toLowerCase();\n    const filtered = countries.filter(c => c.name.common.toLocaleLowerCase().includes(query));\n    setFilteredCountries(filtered);\n  }, [searchQuery, countries]);\n  const handleSearchChange = e => {\n    set;\n  };\n  const handleCountryClick = country => {\n    if (selectedCountries.includes(country)) {\n      setSelectedCountries([...selectedCountries, country]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Countries\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"countryForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"countryInput\",\n        placeholder: \"Enter country name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        id: \"searchButton\",\n        children: \"Search Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countryGrid\",\n      children: countries.map(c => /*#__PURE__*/_jsxDEV(CountryCard, {\n        country: c,\n        onClick: function (country) {\n          throw new Error(\"Function not implemented.\");\n        }\n      }, c.name.common, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(Countries, \"oqyi2asmphhsJOuq0AZ04+I+Ifw=\");\n_c = Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["useEffect","useState","countryService","CountryCard","jsxDEV","_jsxDEV","Countries","_s","countries","setCountries","selectedCountries","setSelectedCountries","filteredCountries","setFilteredCountries","getAllCountries","then","catch","err","console","error","message","query","searchQuery","toLowerCase","filtered","filter","c","name","common","toLocaleLowerCase","includes","handleSearchChange","e","set","handleCountryClick","country","className","children","id","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","Error","_c","$RefreshReg$"],"sources":["C:/chatGpt training/worldCards/world/src/Components/CountryArea/Countries/Countries.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { CountryModel } from \"../../../Models/CountryModel\";\nimport { countryService } from \"../../../Services/CountryService\";\nimport { CountryCard } from \"../CountryCard/CountryCard\";\nimport \"./Countries.css\";\n\ninterface CountriesProps {\n    setSelectedCountries: React.Dispatch<React.SetStateAction<CountryModel[]>>;\n}\n\n\nexport function Countries(): JSX.Element {\n\n    const [countries, setCountries] = useState<CountryModel[]>([]);\n    const [selectedCountries, setSelectedCountries] = useState<CountryModel[]>([]);\n    const [filteredCountries, setFilteredCountries] = useState<CountryModel[]>([]);\n\n    useEffect(() => {\n        countryService.getAllCountries()\n            .then(countries => {\n                setCountries(countries);\n                setFilteredCountries(countries)\n            })\n            .catch(err => console.error(err.message));\n    }, []);\n\n    useEffect(() => {\n        const query = searchQuery.toLowerCase();\n        const filtered = countries.filter(c =>\n            c.name.common.toLocaleLowerCase().includes(query)\n        );\n        setFilteredCountries(filtered);\n    }, [searchQuery, countries])\n\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    {set}\n\n    const handleCountryClick = (country: CountryModel) => {\n        if (selectedCountries.includes(country)) {\n            setSelectedCountries([...selectedCountries, country]);\n        }\n    }\n\n    return (\n        <div className=\"Countries\">\n            <form id=\"countryForm\">\n                <input type=\"text\" id=\"countryInput\" placeholder=\"Enter country name\"></input>\n                <button type=\"button\" id=\"searchButton\">Search Countries</button>\n            </form>\n            <div className=\"countryGrid\">\n                {countries.map(c => (\n                    <CountryCard\n                        key={c.name.common}\n                        country={c} onClick={function (country: CountryModel): void {\n                            throw new Error(\"Function not implemented.\");\n                        }} />\n                ))}\n            </div>\n        </div>\n    );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,WAAW,QAAQ,4BAA4B;AACxD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOzB,OAAO,SAASC,SAASA,CAAA,EAAgB;EAAAC,EAAA;EAErC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAiB,EAAE,CAAC;EAC9D,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAiB,EAAE,CAAC;EAC9E,MAAM,CAACW,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAAiB,EAAE,CAAC;EAE9ED,SAAS,CAAC,MAAM;IACZE,cAAc,CAACY,eAAe,CAAC,CAAC,CAC3BC,IAAI,CAACP,SAAS,IAAI;MACfC,YAAY,CAACD,SAAS,CAAC;MACvBK,oBAAoB,CAACL,SAAS,CAAC;IACnC,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAENpB,SAAS,CAAC,MAAM;IACZ,MAAMqB,KAAK,GAAGC,WAAW,CAACC,WAAW,CAAC,CAAC;IACvC,MAAMC,QAAQ,GAAGhB,SAAS,CAACiB,MAAM,CAACC,CAAC,IAC/BA,CAAC,CAACC,IAAI,CAACC,MAAM,CAACC,iBAAiB,CAAC,CAAC,CAACC,QAAQ,CAACT,KAAK,CACpD,CAAC;IACDR,oBAAoB,CAACW,QAAQ,CAAC;EAClC,CAAC,EAAE,CAACF,WAAW,EAAEd,SAAS,CAAC,CAAC;EAE5B,MAAMuB,kBAAkB,GAAIC,CAAsC,IAClE;IAACC,GAAG;EAAA,CAAC;EAEL,MAAMC,kBAAkB,GAAIC,OAAqB,IAAK;IAClD,IAAIzB,iBAAiB,CAACoB,QAAQ,CAACK,OAAO,CAAC,EAAE;MACrCxB,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,EAAEyB,OAAO,CAAC,CAAC;IACzD;EACJ,CAAC;EAED,oBACI9B,OAAA;IAAK+B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBhC,OAAA;MAAMiC,EAAE,EAAC,aAAa;MAAAD,QAAA,gBAClBhC,OAAA;QAAOkC,IAAI,EAAC,MAAM;QAACD,EAAE,EAAC,cAAc;QAACE,WAAW,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9EvC,OAAA;QAAQkC,IAAI,EAAC,QAAQ;QAACD,EAAE,EAAC,cAAc;QAAAD,QAAA,EAAC;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,eACPvC,OAAA;MAAK+B,SAAS,EAAC,aAAa;MAAAC,QAAA,EACvB7B,SAAS,CAACqC,GAAG,CAACnB,CAAC,iBACZrB,OAAA,CAACF,WAAW;QAERgC,OAAO,EAAET,CAAE;QAACoB,OAAO,EAAE,SAAAA,CAAUX,OAAqB,EAAQ;UACxD,MAAM,IAAIY,KAAK,CAAC,2BAA2B,CAAC;QAChD;MAAE,GAHGrB,CAAC,CAACC,IAAI,CAACC,MAAM;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGd,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACrC,EAAA,CAjDeD,SAAS;AAAA0C,EAAA,GAAT1C,SAAS;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}