{"ast":null,"code":"import axios from\"axios\";import{appConfig}from\"../Utils/AppConfig\";class CountryService{async getAllCountries(){const response=await axios.get(appConfig.countriesUrl);return response.data;}async getOneCountry(name){// Use the correct endpoint: /name instead of /all\nconst response=await axios.get(`${appConfig.countryDetailsUrl}/name/${name}`);return response.data[0];// The API returns an array, so we need to access the first item\n}}export const countryService=new CountryService();","map":{"version":3,"names":["axios","appConfig","CountryService","getAllCountries","response","get","countriesUrl","data","getOneCountry","name","countryDetailsUrl","countryService"],"sources":["C:/chatGpt training/worldCards/world/src/Services/CountryService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { CountryModel } from \"../Models/CountryModel\";\r\nimport { appConfig } from \"../Utils/AppConfig\";\r\n\r\nclass CountryService {\r\n    public async getAllCountries(): Promise<CountryModel[]> {\r\n        const response = await axios.get<CountryModel[]>(appConfig.countriesUrl);\r\n        return response.data;\r\n    }\r\n\r\n    public async getOneCountry(name: string): Promise<CountryModel> {\r\n        // Use the correct endpoint: /name instead of /all\r\n        const response = await axios.get<CountryModel[]>(`${appConfig.countryDetailsUrl}/name/${name}`);\r\n        return response.data[0]; // The API returns an array, so we need to access the first item\r\n    }\r\n}\r\n\r\nexport const countryService = new CountryService();\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,SAAS,KAAQ,oBAAoB,CAE9C,KAAM,CAAAC,cAAe,CACjB,KAAa,CAAAC,eAAeA,CAAA,CAA4B,CACpD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,CAAiBJ,SAAS,CAACK,YAAY,CAAC,CACxE,MAAO,CAAAF,QAAQ,CAACG,IAAI,CACxB,CAEA,KAAa,CAAAC,aAAaA,CAACC,IAAY,CAAyB,CAC5D;AACA,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,CAAiB,GAAGJ,SAAS,CAACS,iBAAiB,SAASD,IAAI,EAAE,CAAC,CAC/F,MAAO,CAAAL,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAE;AAC7B,CACJ,CAEA,MAAO,MAAM,CAAAI,cAAc,CAAG,GAAI,CAAAT,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}